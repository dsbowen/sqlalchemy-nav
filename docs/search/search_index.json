{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SQLAlchemy-Nav SQLAlchemy-Nav makes it easy to create and customize dynamic Bootstrap 4 Navbars for web apps with a SQLAlchemy backend. Why SQLAlchemy-Nav Unlike static Navbars, SQLAlchemy-Nav can create personalized Navbars for your users. Installation $ pip install sqlalchemy-nav Quickstart Run the following setup code. from sqlalchemy_nav import NavbarMixin, NavitemMixin, DropdownitemMixin from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker, scoped_session from sqlalchemy.ext.declarative import declarative_base # session creation (standard) engine = create_engine('sqlite:///:memory:') session_factory = sessionmaker(bind=engine) Session = scoped_session(session_factory) session = Session() Base = declarative_base() # use the SQLAlchemy-Nav Mixins to create database models class Navbar(NavbarMixin, Base): __tablename__ = 'navbar' class Navitem(NavitemMixin, Base): __tablename__ = 'navitem' class Dropdownitem(DropdownitemMixin, Base): __tablename__ = 'dropdownitem' # create the database (standard) Base.metadata.create_all(engine) Create and render a Navbar: navbar = Navbar(label='Home', href='https://my-home-page') Navitem(navbar, label='About', href='/about') navitem = Navitem(navbar, dropdown=True, label='Dropdown') Dropdownitem(navitem, label='Item0', href='/item0') Dropdownitem(navitem, label='Item1', href='/item1') session.add(navbar) session.commit() print(navbar.render().prettify()) Out: <nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\"> <a class=\"navbar-brand\" href=\"https://my-home-page\"> Home </a> <button aria-controls=\"navbar-1\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" class=\"navbar-toggler\" data-target=\"#navbar-1\" data-toggle=\"collapse\" type=\"button\"> <span class=\"navbar-toggler-icon\"> </span> </button> <div class=\"collapse navbar-collapse\" id=\"navbar-1\"> <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"/about\"> About </a> </li> <li class=\"nav-item dropdown\"> <a aria-expanded=\"false\" aria-haspopup=\"true\" class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" href=\"\" id=\"navitem-2\" role=\"button\"> Dropdown </a> <div aria-labelledby=\"navitem-2\" class=\"dropdown-menu\"> <a class=\"dropdown-item\" href=\"/item0\"> Item0 </a> <a class=\"dropdown-item\" href=\"/item1\"> Item1 </a> </div> </li> </ul> </div> </nav> Citation @software{bowen2020sqlalchemy-nav, author = {Dillon Bowen}, title = {SQLAlchemy-Nav}, url = {https://dsbowen.github.io/sqlalchemy-nav/}, date = {2020-06-10}, } License Users must cite this package in any publications which use it. It is licensed with the MIT License .","title":"Home"},{"location":"#sqlalchemy-nav","text":"SQLAlchemy-Nav makes it easy to create and customize dynamic Bootstrap 4 Navbars for web apps with a SQLAlchemy backend.","title":"SQLAlchemy-Nav"},{"location":"#why-sqlalchemy-nav","text":"Unlike static Navbars, SQLAlchemy-Nav can create personalized Navbars for your users.","title":"Why SQLAlchemy-Nav"},{"location":"#installation","text":"$ pip install sqlalchemy-nav","title":"Installation"},{"location":"#quickstart","text":"Run the following setup code. from sqlalchemy_nav import NavbarMixin, NavitemMixin, DropdownitemMixin from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker, scoped_session from sqlalchemy.ext.declarative import declarative_base # session creation (standard) engine = create_engine('sqlite:///:memory:') session_factory = sessionmaker(bind=engine) Session = scoped_session(session_factory) session = Session() Base = declarative_base() # use the SQLAlchemy-Nav Mixins to create database models class Navbar(NavbarMixin, Base): __tablename__ = 'navbar' class Navitem(NavitemMixin, Base): __tablename__ = 'navitem' class Dropdownitem(DropdownitemMixin, Base): __tablename__ = 'dropdownitem' # create the database (standard) Base.metadata.create_all(engine) Create and render a Navbar: navbar = Navbar(label='Home', href='https://my-home-page') Navitem(navbar, label='About', href='/about') navitem = Navitem(navbar, dropdown=True, label='Dropdown') Dropdownitem(navitem, label='Item0', href='/item0') Dropdownitem(navitem, label='Item1', href='/item1') session.add(navbar) session.commit() print(navbar.render().prettify()) Out: <nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\"> <a class=\"navbar-brand\" href=\"https://my-home-page\"> Home </a> <button aria-controls=\"navbar-1\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" class=\"navbar-toggler\" data-target=\"#navbar-1\" data-toggle=\"collapse\" type=\"button\"> <span class=\"navbar-toggler-icon\"> </span> </button> <div class=\"collapse navbar-collapse\" id=\"navbar-1\"> <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"/about\"> About </a> </li> <li class=\"nav-item dropdown\"> <a aria-expanded=\"false\" aria-haspopup=\"true\" class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" href=\"\" id=\"navitem-2\" role=\"button\"> Dropdown </a> <div aria-labelledby=\"navitem-2\" class=\"dropdown-menu\"> <a class=\"dropdown-item\" href=\"/item0\"> Item0 </a> <a class=\"dropdown-item\" href=\"/item1\"> Item1 </a> </div> </li> </ul> </div> </nav>","title":"Quickstart"},{"location":"#citation","text":"@software{bowen2020sqlalchemy-nav, author = {Dillon Bowen}, title = {SQLAlchemy-Nav}, url = {https://dsbowen.github.io/sqlalchemy-nav/}, date = {2020-06-10}, }","title":"Citation"},{"location":"#license","text":"Users must cite this package in any publications which use it. It is licensed with the MIT License .","title":"License"},{"location":"api/","text":"a.src-href { float: right; } p.attr { margin-top: 0.5em; margin-left: 1em; } p.func-header { background-color: gainsboro; border-radius: 0.1em; padding: 0.5em; padding-left: 1em; } table.field-table { border-radius: 0.1em } API sqlalchemy_nav. Base class sqlalchemy_nav. Base ( template, label=None, href=None, *args, **kwargs ) [source] All SQLAlchemy-Nav mixins inherit from this base. Parameters: template : str Relative path to the html template file. Users should not pass this argument; it is passed automatically by mixins. label : str Label (text) of the first <a> tag. href : str Hyperref of the first <a> tag. Attributes: id : int Model identifier. index : int Order of the model in its parent's list. e.g. the 0th Navitem in a Navbar has an index of 0. body : sqlalchemy_mutablesoup.MutableSoup The body of the object. This is converted to html when the object is rendered. a : bs4.Tag First <a> html tag in body . label : str Text of a . Set from the label parameter. href : str Hyperref of a . Set from the href parameter. Methods is_active ( self ) [source] Returns: is_active : bool Indicates that the object's href is active. render ( self, body=None ) [source] Prepares a bs4.BeautifulSoup object for rendering into html. Parameters: body : sqlalchemy_mutablesoup.MutableSoup or None, default=None Object to render. If None , a copy of self.body is used. Returns: body : sqlalchemy_mutablesoup.MutableSoup Prepared for rendering into html. sqlalchemy_nav. NavbarMixin class sqlalchemy_nav. NavbarMixin ( name=None, *args, **kwargs ) [source] Navigation bar mixin. Parameters: name : str Name of the navigation bar. This facilitates finding the navigation bar when querying the database. *args, **kwargs : Additional arguments and keyword arguments are passed to Base.__init__ . Attributes: name : str Set from the name parameter. navitems : sqlalchemy.ext.orderinglist.OrderingList List of Navitem objects ordered by index . sqlalchemy_nav. NavitemMixin class sqlalchemy_nav. NavitemMixin ( navbar=None, dropdown=False, *args, **kwargs ) [source] Navigation item mixin. Parameters: navbar : sqlalchemy_nav.NavbarMixin or None, default=None Navigation bar with which this navigation item is associated. dropdown : bool, default=False Indicates that this navitem will contain dropdown items. *args, **kwargs : Additional arguments and keyword arguments are passed to Base.__init__ . Attributes: navbar : sqlalchemy_nav.NavbarMixin or None Set from the navbar parameter. dropdownitems : sqlalchemy.ext.orderinglist.OrderingList List of Dropdownitem objects ordered by index . sqlalchemy_nav. DropdownitemMixin class sqlalchemy_nav. DropdownitemMixin ( navitem=None, *args, **kwargs ) [source] Dropdown item mixin. Parameters: navitem : sqlalchemy_nav.NavitemMixin or None, default=None Navigation item with which this dropdown item is associated. *args, **kwargs : Additional arguments and keyword arguments are passed to Base.__init__ . Attributes: navitem : sqlalchemy_nav.NavitemMixin or None Set from the navitem parameter.","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#sqlalchemy_navbase","text":"class sqlalchemy_nav. Base ( template, label=None, href=None, *args, **kwargs ) [source] All SQLAlchemy-Nav mixins inherit from this base. Parameters: template : str Relative path to the html template file. Users should not pass this argument; it is passed automatically by mixins. label : str Label (text) of the first <a> tag. href : str Hyperref of the first <a> tag. Attributes: id : int Model identifier. index : int Order of the model in its parent's list. e.g. the 0th Navitem in a Navbar has an index of 0. body : sqlalchemy_mutablesoup.MutableSoup The body of the object. This is converted to html when the object is rendered. a : bs4.Tag First <a> html tag in body . label : str Text of a . Set from the label parameter. href : str Hyperref of a . Set from the href parameter.","title":"sqlalchemy_nav.Base"},{"location":"api/#methods","text":"is_active ( self ) [source] Returns: is_active : bool Indicates that the object's href is active. render ( self, body=None ) [source] Prepares a bs4.BeautifulSoup object for rendering into html. Parameters: body : sqlalchemy_mutablesoup.MutableSoup or None, default=None Object to render. If None , a copy of self.body is used. Returns: body : sqlalchemy_mutablesoup.MutableSoup Prepared for rendering into html.","title":"Methods"},{"location":"api/#sqlalchemy_navnavbarmixin","text":"class sqlalchemy_nav. NavbarMixin ( name=None, *args, **kwargs ) [source] Navigation bar mixin. Parameters: name : str Name of the navigation bar. This facilitates finding the navigation bar when querying the database. *args, **kwargs : Additional arguments and keyword arguments are passed to Base.__init__ . Attributes: name : str Set from the name parameter. navitems : sqlalchemy.ext.orderinglist.OrderingList List of Navitem objects ordered by index .","title":"sqlalchemy_nav.NavbarMixin"},{"location":"api/#sqlalchemy_navnavitemmixin","text":"class sqlalchemy_nav. NavitemMixin ( navbar=None, dropdown=False, *args, **kwargs ) [source] Navigation item mixin. Parameters: navbar : sqlalchemy_nav.NavbarMixin or None, default=None Navigation bar with which this navigation item is associated. dropdown : bool, default=False Indicates that this navitem will contain dropdown items. *args, **kwargs : Additional arguments and keyword arguments are passed to Base.__init__ . Attributes: navbar : sqlalchemy_nav.NavbarMixin or None Set from the navbar parameter. dropdownitems : sqlalchemy.ext.orderinglist.OrderingList List of Dropdownitem objects ordered by index .","title":"sqlalchemy_nav.NavitemMixin"},{"location":"api/#sqlalchemy_navdropdownitemmixin","text":"class sqlalchemy_nav. DropdownitemMixin ( navitem=None, *args, **kwargs ) [source] Dropdown item mixin. Parameters: navitem : sqlalchemy_nav.NavitemMixin or None, default=None Navigation item with which this dropdown item is associated. *args, **kwargs : Additional arguments and keyword arguments are passed to Base.__init__ . Attributes: navitem : sqlalchemy_nav.NavitemMixin or None Set from the navitem parameter.","title":"sqlalchemy_nav.DropdownitemMixin"},{"location":"contribute/","text":"Contribute I welcome contributions to the project, especially support for stylesheets other than Bootstrap 4.","title":"Contribute"},{"location":"contribute/#contribute","text":"I welcome contributions to the project, especially support for stylesheets other than Bootstrap 4.","title":"Contribute"},{"location":"examples/","text":"Examples View examples of Bootstrap 4 Navbars . Setup Run the following setup to use with SQLAlchemy . from sqlalchemy_nav import NavbarMixin, NavitemMixin, DropdownitemMixin from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker, scoped_session from sqlalchemy.ext.declarative import declarative_base # session creation (standard) engine = create_engine('sqlite:///:memory:') session_factory = sessionmaker(bind=engine) Session = scoped_session(session_factory) session = Session() Base = declarative_base() # use the SQLAlchemy-Nav Mixins to create database models class Navbar(NavbarMixin, Base): __tablename__ = 'navbar' class Navitem(NavitemMixin, Base): __tablename__ = 'navitem' class Dropdownitem(DropdownitemMixin, Base): __tablename__ = 'dropdownitem' # create the database (standard) Base.metadata.create_all(engine) Alternatively, run the following setup to use with Flask-SQLAlchemy . from sqlalchemy_nav import NavbarMixin, NavitemMixin, DropdownitemMixin from flask import Flask, Markup, render_template, url_for from flask_sqlalchemy import SQLAlchemy # create session (standard) app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:' app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False db = SQLAlchemy(app) # use the SQLAlchemy-Nav Mixins to create database models class Navbar(NavbarMixin, db.Model): pass class Navitem(NavitemMixin, db.Model): pass class Dropdownitem(DropdownitemMixin, db.Model): pass # create the database (standard) db.create_all() session = db.session Basic use navbar = Navbar(label='Home', href='https://my-home-page') Navitem(navbar, label='About', href='/about') navitem = Navitem(navbar, dropdown=True, label='Dropdown') Dropdownitem(navitem, label='Item0', href='/item0') Dropdownitem(navitem, label='Item1', href='/item1') session.add(navbar) session.commit() print(navbar.render().prettify()) Out: <nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\"> <a class=\"navbar-brand\" href=\"https://my-home-page\"> Home </a> <button aria-controls=\"navbar-1\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" class=\"navbar-toggler\" data-target=\"#navbar-1\" data-toggle=\"collapse\" type=\"button\"> <span class=\"navbar-toggler-icon\"> </span> </button> <div class=\"collapse navbar-collapse\" id=\"navbar-1\"> <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"/about\"> About </a> </li> <li class=\"nav-item dropdown\"> <a aria-expanded=\"false\" aria-haspopup=\"true\" class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" href=\"\" id=\"navitem-2\" role=\"button\"> Dropdown </a> <div aria-labelledby=\"navitem-2\" class=\"dropdown-menu\"> <a class=\"dropdown-item\" href=\"/item0\"> Item0 </a> <a class=\"dropdown-item\" href=\"/item1\"> Item1 </a> </div> </li> </ul> </div> </nav> Customization We can manipulate the SQLAlchemy-MutableSoup object for further customization. In this example, we add a search bar. from bs4 import BeautifulSoup navbar = Navbar(label='Home', href='https://my-home-page') session.add(navbar) session.commit() searchbar_html = ''' <form class=\"form-inline\"> <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"> <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button> </form> ''' searchbar = BeautifulSoup(searchbar_html, 'html.parser') navbar.body.select_one('nav').append(searchbar) navbar.body.changed() print(navbar.render().prettify()) Out: <nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\"> <a class=\"navbar-brand\" href=\"https://my-home-page\"> Home </a> <button aria-controls=\"navbar-2\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" class=\"navbar-toggler\" data-target=\"#navbar-2\" data-toggle=\"collapse\" type=\"button\"> <span class=\"navbar-toggler-icon\"> </span> </button> <div class=\"collapse navbar-collapse\" id=\"navbar-2\"> <ul class=\"navbar-nav mr-auto\"> </ul> </div> <form class=\"form-inline\"> <input aria-label=\"Search\" class=\"form-control mr-sm-2\" placeholder=\"Search\" type=\"search\"/> <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\"> Search </button> </form> </nav>","title":"Examples"},{"location":"examples/#examples","text":"View examples of Bootstrap 4 Navbars .","title":"Examples"},{"location":"examples/#setup","text":"Run the following setup to use with SQLAlchemy . from sqlalchemy_nav import NavbarMixin, NavitemMixin, DropdownitemMixin from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker, scoped_session from sqlalchemy.ext.declarative import declarative_base # session creation (standard) engine = create_engine('sqlite:///:memory:') session_factory = sessionmaker(bind=engine) Session = scoped_session(session_factory) session = Session() Base = declarative_base() # use the SQLAlchemy-Nav Mixins to create database models class Navbar(NavbarMixin, Base): __tablename__ = 'navbar' class Navitem(NavitemMixin, Base): __tablename__ = 'navitem' class Dropdownitem(DropdownitemMixin, Base): __tablename__ = 'dropdownitem' # create the database (standard) Base.metadata.create_all(engine) Alternatively, run the following setup to use with Flask-SQLAlchemy . from sqlalchemy_nav import NavbarMixin, NavitemMixin, DropdownitemMixin from flask import Flask, Markup, render_template, url_for from flask_sqlalchemy import SQLAlchemy # create session (standard) app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:' app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False db = SQLAlchemy(app) # use the SQLAlchemy-Nav Mixins to create database models class Navbar(NavbarMixin, db.Model): pass class Navitem(NavitemMixin, db.Model): pass class Dropdownitem(DropdownitemMixin, db.Model): pass # create the database (standard) db.create_all() session = db.session","title":"Setup"},{"location":"examples/#basic-use","text":"navbar = Navbar(label='Home', href='https://my-home-page') Navitem(navbar, label='About', href='/about') navitem = Navitem(navbar, dropdown=True, label='Dropdown') Dropdownitem(navitem, label='Item0', href='/item0') Dropdownitem(navitem, label='Item1', href='/item1') session.add(navbar) session.commit() print(navbar.render().prettify()) Out: <nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\"> <a class=\"navbar-brand\" href=\"https://my-home-page\"> Home </a> <button aria-controls=\"navbar-1\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" class=\"navbar-toggler\" data-target=\"#navbar-1\" data-toggle=\"collapse\" type=\"button\"> <span class=\"navbar-toggler-icon\"> </span> </button> <div class=\"collapse navbar-collapse\" id=\"navbar-1\"> <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"/about\"> About </a> </li> <li class=\"nav-item dropdown\"> <a aria-expanded=\"false\" aria-haspopup=\"true\" class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" href=\"\" id=\"navitem-2\" role=\"button\"> Dropdown </a> <div aria-labelledby=\"navitem-2\" class=\"dropdown-menu\"> <a class=\"dropdown-item\" href=\"/item0\"> Item0 </a> <a class=\"dropdown-item\" href=\"/item1\"> Item1 </a> </div> </li> </ul> </div> </nav>","title":"Basic use"},{"location":"examples/#customization","text":"We can manipulate the SQLAlchemy-MutableSoup object for further customization. In this example, we add a search bar. from bs4 import BeautifulSoup navbar = Navbar(label='Home', href='https://my-home-page') session.add(navbar) session.commit() searchbar_html = ''' <form class=\"form-inline\"> <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"> <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button> </form> ''' searchbar = BeautifulSoup(searchbar_html, 'html.parser') navbar.body.select_one('nav').append(searchbar) navbar.body.changed() print(navbar.render().prettify()) Out: <nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\"> <a class=\"navbar-brand\" href=\"https://my-home-page\"> Home </a> <button aria-controls=\"navbar-2\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" class=\"navbar-toggler\" data-target=\"#navbar-2\" data-toggle=\"collapse\" type=\"button\"> <span class=\"navbar-toggler-icon\"> </span> </button> <div class=\"collapse navbar-collapse\" id=\"navbar-2\"> <ul class=\"navbar-nav mr-auto\"> </ul> </div> <form class=\"form-inline\"> <input aria-label=\"Search\" class=\"form-control mr-sm-2\" placeholder=\"Search\" type=\"search\"/> <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\"> Search </button> </form> </nav>","title":"Customization"},{"location":"objects/","text":"a.src-href { float: right; } p.attr { margin-top: 0.5em; margin-left: 1em; } p.func-header { background-color: gainsboro; border-radius: 0.1em; padding: 0.5em; padding-left: 1em; } table.field-table { border-radius: 0.1em } SQLAlchemy-Nav objects sqlalchemy_nav. Base class sqlalchemy_nav. Base ( template, label=None, href=None, *args, **kwargs ) [source] All SQLAlchemy-Nav mixins inherit from this base. Parameters: template : str Relative path to the html template file. Users should not pass this argument; it is passed automatically by mixins. label : str Label (text) of the first tag. href : str Hyperref of the first tag. Attributes: id : int Model identifier. index : int Order of the model in its parent's list. e.g. the 0th Navitem in a Navbar has an index of 0. body : sqlalchemy_mutablesoup.MutableSoup The body of the object. This is converted to html when the object is rendered. a : bs4.Tag First html tag in body . label : str Text of a . Set from the label parameter. href : str Hyperref of a . Set from the href parameter. Methods is_active ( self ) [source] Returns: is_active : bool Indicates that the object's href is active. render ( self, body=None ) [source] Prepares self.body for rendering into html. Parameters: body : sqlalchemy_mutablesoup.MutableSoup or None, default=None Object to render. If None , a copy of self.body is used. Returns: body : sqlalchemy_mutablesoup.MutableSoup Prepared for rendering into html. sqlalchemy_nav. NavbarMixin class sqlalchemy_nav. NavbarMixin ( name=None, *args, **kwargs ) [source] Navigation bar mixin. Parameters: name : str Name of the navigation bar. This facilitates finding the navigation bar when querying the database. args, *kwargs : Additional arguments and keyword arguments are passed to Base.__init__ . Attributes: name : str Set from the name parameter. navitems : sqlalchemy.ext.orderinglist.OrderingList List of Navitem objects ordered by index . Methods navitems ( cls ) [source] sqlalchemy_nav. NavitemMixin class sqlalchemy_nav. NavitemMixin ( navbar=None, dropdown=False, *args, **kwargs ) [source] Navigation item mixin. Parameters: navbar : sqlalchemy_nav.NavbarMixin or None, default=None Navigation bar with which this navigation item is associated. dropdown : bool, default=False Indicates that this navitem will contain dropdown items. args, *kwargs : Additional arguments and keyword arguments are passed to Base.__init__ . Attributes: navbar : sqlalchemy_nav.NavbarMixin or None Set from the navbar parameter. dropdownitems : sqlalchemy.ext.orderinglist.OrderingList List of Dropdownitem objects ordered by index . Methods dropdownitems ( cls ) [source] sqlalchemy_nav. DropdownitemMixin class sqlalchemy_nav. DropdownitemMixin ( navitem=None, *args, **kwargs ) [source] Dropdown item mixin. Parameters: navitem : sqlalchemy_nav.NavitemMixin or None, default=None Navigation item with which this dropdown item is associated. args, *kwargs : Additional arguments and keyword arguments are passed to Base.__init__ . Attributes: navitem : sqlalchemy_nav.NavitemMixin or None Set from the navitem parameter.","title":"Objects"},{"location":"objects/#sqlalchemy-nav-objects","text":"","title":"SQLAlchemy-Nav objects"},{"location":"objects/#sqlalchemy_navbase","text":"class sqlalchemy_nav. Base ( template, label=None, href=None, *args, **kwargs ) [source] All SQLAlchemy-Nav mixins inherit from this base. Parameters: template : str Relative path to the html template file. Users should not pass this argument; it is passed automatically by mixins. label : str Label (text) of the first tag. href : str Hyperref of the first tag. Attributes: id : int Model identifier. index : int Order of the model in its parent's list. e.g. the 0th Navitem in a Navbar has an index of 0. body : sqlalchemy_mutablesoup.MutableSoup The body of the object. This is converted to html when the object is rendered. a : bs4.Tag First html tag in body . label : str Text of a . Set from the label parameter. href : str Hyperref of a . Set from the href parameter.","title":"sqlalchemy_nav.Base"},{"location":"objects/#methods","text":"is_active ( self ) [source] Returns: is_active : bool Indicates that the object's href is active. render ( self, body=None ) [source] Prepares self.body for rendering into html. Parameters: body : sqlalchemy_mutablesoup.MutableSoup or None, default=None Object to render. If None , a copy of self.body is used. Returns: body : sqlalchemy_mutablesoup.MutableSoup Prepared for rendering into html.","title":"Methods"},{"location":"objects/#sqlalchemy_navnavbarmixin","text":"class sqlalchemy_nav. NavbarMixin ( name=None, *args, **kwargs ) [source] Navigation bar mixin. Parameters: name : str Name of the navigation bar. This facilitates finding the navigation bar when querying the database. args, *kwargs : Additional arguments and keyword arguments are passed to Base.__init__ . Attributes: name : str Set from the name parameter. navitems : sqlalchemy.ext.orderinglist.OrderingList List of Navitem objects ordered by index .","title":"sqlalchemy_nav.NavbarMixin"},{"location":"objects/#methods_1","text":"navitems ( cls ) [source]","title":"Methods"},{"location":"objects/#sqlalchemy_navnavitemmixin","text":"class sqlalchemy_nav. NavitemMixin ( navbar=None, dropdown=False, *args, **kwargs ) [source] Navigation item mixin. Parameters: navbar : sqlalchemy_nav.NavbarMixin or None, default=None Navigation bar with which this navigation item is associated. dropdown : bool, default=False Indicates that this navitem will contain dropdown items. args, *kwargs : Additional arguments and keyword arguments are passed to Base.__init__ . Attributes: navbar : sqlalchemy_nav.NavbarMixin or None Set from the navbar parameter. dropdownitems : sqlalchemy.ext.orderinglist.OrderingList List of Dropdownitem objects ordered by index .","title":"sqlalchemy_nav.NavitemMixin"},{"location":"objects/#methods_2","text":"dropdownitems ( cls ) [source]","title":"Methods"},{"location":"objects/#sqlalchemy_navdropdownitemmixin","text":"class sqlalchemy_nav. DropdownitemMixin ( navitem=None, *args, **kwargs ) [source] Dropdown item mixin. Parameters: navitem : sqlalchemy_nav.NavitemMixin or None, default=None Navigation item with which this dropdown item is associated. args, *kwargs : Additional arguments and keyword arguments are passed to Base.__init__ . Attributes: navitem : sqlalchemy_nav.NavitemMixin or None Set from the navitem parameter.","title":"sqlalchemy_nav.DropdownitemMixin"}]}